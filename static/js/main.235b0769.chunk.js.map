{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChanged","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAQ,SAAAC,GAAK,OACtB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCKXC,EATE,SAACR,GACd,OACA,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCGhBM,G,MARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACd,uBAAOC,KAAK,SACRb,UAAU,SACVW,YAAcA,EACdG,SAAWF,MCqCJG,E,kDArCb,aAAe,IAAD,8BACZ,gBAeFC,gBAAkB,SAAAC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,qDASd,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAClB,CAACV,SAAUmB,EAAOR,YAAa,U,oBAOnC,WAAU,IAAD,EAE2BS,KAAKN,MAA/Bd,EAFD,EAECA,SAAUW,EAFX,EAEWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKZ,kBAC5D,cAAC,EAAD,CAAUR,SAAUqB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.235b0769.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../card/card.styles.css';\r\n\r\nexport const Card  = props =>  (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?ref=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n    </div>)\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => (\r\n    <input type='search' \r\n        className='search'\r\n        placeholder={ placeholder }\r\n        onChange={ handleChange }\r\n    />\r\n);\r\n\r\nexport default SearchBox;","import { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from './components/card-list/card-list.component';\r\nimport SearchBox from './components/search-box/search-box.component';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState(\r\n      {monsters: users, searchField: ''}))\r\n  }\r\n\r\n  onSearchChanged = event => {\r\n    this.setState({ searchField: event.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox placeholder='Search monsters' handleChange={this.onSearchChanged} />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}